#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
from PyQt4 import QtGui, QtCore
import requests

class DownloadThread(QtCore.QThread):

    data_downloaded = QtCore.pyqtSignal(object, object)

    def __init__(self, url, dname, count):
        QtCore.QThread.__init__(self)
        self.url = url
        self.dname = dname
        self.count = count

    def run(self):
        print self.count, self.url
        fname=self.url.split("/")[-1]
        save_fname = self.dname + '/' + fname
        print save_fname

        self.data_downloaded.emit('%d - %s %s' % (self.count, "Downloading to", save_fname), 0)
        
        response = requests.get(self.url, stream=True)

        with open(save_fname, "wb") as handle:
            for data in response.iter_content():
                handle.write(data)

        self.data_downloaded.emit('%d - %s %s' % (self.count, "Download finished to", save_fname), 1)


class FileDialogClass(QtGui.QMainWindow):
    data=''
    progress=''
     
    def __init__(self):
        super(FileDialogClass, self).__init__()
        
        self.initUI()
        
    def initUI(self):      

        self.textEdit = QtGui.QTextEdit()
        self.setCentralWidget(self.textEdit)
        self.statusBar()

        openFile = QtGui.QAction(QtGui.QIcon('open.png'), 'Open', self)
        openFile.setShortcut('Ctrl+O')
        openFile.setStatusTip('Open new File')
        openFile.triggered.connect(self.showDialog)

        downloadFile = QtGui.QAction(QtGui.QIcon('open.png'), 'Download', self)
        downloadFile.setShortcut('Ctrl+D')
        downloadFile.setStatusTip('Download data')
        downloadFile.triggered.connect(self.showDownloadDialog)

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(openFile)       
        downloadMenu = menubar.addMenu('&Download')
        downloadMenu.addAction(downloadFile)       
        
        self.setGeometry(300, 300, 600, 450)
        self.setWindowTitle('File dialog')
        self.show()
        
    def showDialog(self):

        fname = QtGui.QFileDialog.getOpenFileName(self, 'Open file', 
                '/tmp')
        
        f = open(fname, 'r')
        
        with f:        
            self.data = f.read()
            self.textEdit.setText(self.data) 
                                
        
    def updateText(self, message):
        self.textEdit.append(message)
            
    def showDownloadDialog(self):
        dname = QtGui.QFileDialog.getExistingDirectory(self, 'Save data at ...', 
                '/home/abhishek', QtGui.QFileDialog.ShowDirsOnly|QtGui.QFileDialog.DontResolveSymlinks)
        
        print dname

        url_list = self.data.split()
        self.threads = []
        count = 0

        self.textEdit.clear()

        for url in url_list:
            count += 1
            print url

            downloader = DownloadThread(url, dname, count)
            downloader.data_downloaded.connect(self.on_data_ready)
            self.threads.append(downloader)
            downloader.start()
            
    def on_data_ready(self, d, t):
        print d

        col = None
        if t:
            col = QtGui.QColor("red")
        else:
            col = QtGui.QColor("green")

        textColor = self.textEdit.textColor()
        self.textEdit.setTextColor(col)
        self.updateText(unicode(d))

        self.textEdit.setTextColor(textColor)

def main():
    app = QtGui.QApplication(sys.argv)
    ex = FileDialogClass()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
